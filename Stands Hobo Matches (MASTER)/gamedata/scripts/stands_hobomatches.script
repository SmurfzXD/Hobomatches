-- stolen from Arti's Lootboxes <3 

local gc = game.translate_string
local rand = math.random
local send_tip = news_manager.send_tip

local map_tiers = {

   -- STALKER loot is 80/15/5 for 1 item
    ["stalker"]                = {"hobo_match,1","hobo_match,3"},
    ["csky"]                = {"hobo_match,2"},
    ["bandit"]                = { "hobo_match,2", "hobo_match,4"},
    ["renegade"]              = { "hobo_match,1", "hobo_match,1"},
    ["dolg"]              = { "nothing","hobo_match,1"},
    ["freedom"]              = { "nothing", "hobo_match,3"},
    ["ecolog"]              = { "hobo_match,1"},
    ["killer"]              = { "hobo_match,2","hobo_match,2"},
    ["monolith"]              = { "nothing", "nothing", "hobo_match,1" },
    ["greh"]              = { "nothing", "hobo_match,1"},
    ["isg"]              = { "hobo_match,4"}
}

function print_dbg(text, ...) 
    if true then
        printf("matches| %s | " .. text, time_global(), ...)
    end
end

-- trying to take 2 matches and turn it into a box

function try_box(obj)
    local num_matches = 0
    local function search(temp, item)
        local item_section = item:section()
        if item_section == "hobo_match" then
            num_matches = num_matches + 1
        end
    end
    db.actor:iterate_inventory(search, nil)
    if (num_matches >= 2) then 
        return gc("st_match_box")
    end
end

-- trying to take 2 matches and turn it into a box and remove the 2 matches

function box_matches(obj)
    
    local num_matches = 0
    local match_ids = {}
    local function search(temp, item)
        local item_section = item:section()
        if item_section == "hobo_match" then
            num_matches = num_matches + 1
            match_ids[num_matches] = item:id()
        end
    end
    
    db.actor:iterate_inventory(search, nil)
    if (num_matches > 1) then
        for i=1,2 do
            alife_release_id(match_ids[i])
        end
        death_manager.spawn_with_condition(db.actor, "hobo_matchbox", 0.0625)
    end
end

-- trying to take a match from the box as long as it's above 2 matches. if it isn't it gets rid of the box and gives you 2 matches

function try_match(obj)
    return gc("st_take_match")
end

function take_match(obj)
    local condition = obj:condition()
    if condition >	0.03125 then
    give_object_to_actor("hobo_match",1) 
	obj:set_condition(clamp (condition - .03125, 0, 1))
    elseif condition <= 0.03125 then
		alife_release_id(obj:id())
        give_object_to_actor("hobo_match",1)
    end
end

-- refill match box

function on_item_drag_dropped(from, to, slot_from, slot_to)
	
	local item_from = from and from:section() or nil
	local item_to = to and to:section() or nil
    if item_from == nil or item_to == nil then return end
    -- item_from is hobo_match and item_to is hobo_matchbox 
    local replace_amt = SYS_GetParam(2,item_from,"matchreplacement")	
    if (replace_amt ~= nil and item_to == "hobo_matchbox") then
        -- repair the hobo_matchbox and discharge hobo_match		
        print_dbg("Placing Match into Box")
        local final_uses = to:condition() + replace_amt
        if to:condition() < 1.0 then
            to:set_condition(clamp(final_uses, 0, 1))
            alife_release_id(from:id())
            send_tip(db.actor, gc("st_add_match"), nil, "swiss_knife", 6000)			
		end				
		if to:condition() == 1.0 then					
			send_tip(db.actor, gc("st_box_full"))
		end
    end
end

-- to display condition on matchbox 32 max matches

BuildHeader = ui_item.build_desc_header  -- obj needed
function ui_item.build_desc_header(obj, sec, str)
	str = str or gc(ini_sys:r_string_ex(sec,"description"))
	if (not str) then return "" end
	
	local _str = ""
    if "hobo_matchbox" == sec then
        print_dbg("building condition for box of strike anywhere matches")
        local con = math.floor(obj:condition() / 0.03125)
        local clr = utils_xml.get_color_con(con)
        _str = clr .. " " .. gc("st_dot").. " " .. utils_xml.get_color("ui_gray_1") .. gc("st_number_of_uses") .. ": " .. clr .. tostring(con)  ..  "\\n \\n" .. utils_xml.get_color("ui_gray_1")   
        return _str .. str
    else
        return BuildHeader(obj, sec, str)
    end
end
-- spawn random amount of matches
function spawn_stalker_loot(npc)
    if  math.random(4) == 1 then             
        alife_create_item("hobo_match", npc)
    end
end

CreateReleaseItem = death_manager.create_release_item
function death_manager.create_release_item(npc)
    print_dbg("Interdicted death manager - spawning matches")
    CreateReleaseItem(npc)
    spawn_stalker_loot(npc)
end

function on_game_start()	
    RegisterScriptCallback("ActorMenu_on_item_drag_drop",on_item_drag_dropped)	
end